{"version":3,"sources":["../../src/lib/util.js"],"names":["toRes","pino","require","res","status","err","thing","send","toObject","json","providers","facebook","url","google","validateWithProvider","network","socialToken","resolve","reject","method","params","access_token","data","createJwt","payload","profile","sign","process","env","JWT_PRIVATE_KEY","issuer","JWT_ISSUER","verifyJwt","verify","jwtString","decoded"],"mappings":";;;;;;;;;;;;;;;;;;;QAcgBA,K,GAAAA,K;;AAdhB;;;;AAEA;;;;AACA;;;;;;AAFA,IAAMC,OAAOC,QAAQ,MAAR,GAAb;;;AAIA;;;;;;;;;AASO,SAASF,KAAT,CAAeG,GAAf,EAAkC;AAAA,MAAdC,MAAc,uEAAL,GAAK;;AACvC,SAAO,UAACC,GAAD,EAAMC,KAAN,EAAgB;AACrB,QAAID,GAAJ,EACE,OAAOF,IAAIC,MAAJ,CAAW,GAAX,EAAgBG,IAAhB,CAAqBF,GAArB,CAAP;;AAEF,QAAIC,SAAS,OAAOA,MAAME,QAAb,KAA0B,UAAvC,EAAmD;AACjDF,cAAQA,MAAME,QAAN,EAAR;AACD;AACDL,QACGC,MADH,CACUA,MADV,EAEGK,IAFH,CAEQH,KAFR;AAGD,GAVD;AAWD;;AAED;AACA,IAAMI,YAAY;AAChBC,YAAU;AACRC,SAAK;AADG,GADM;AAIhBC,UAAQ;AACND,SAAK;AADC;AAJQ,CAAlB;AAQO,IAAME,sDAAuB,SAAvBA,oBAAuB,CAACC,OAAD,EAAUC,WAAV,EAA0B;AAC5D,SAAO,uBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC;AACA,+DAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEqB,qBAAM;AACtBC,wBAAQ,KADc;AAEtBP,qBAAKF,UAAUK,OAAV,EAAmBH,GAFF;AAGtBQ,wBAAQ;AACNC,gCAAcL;AADR;AAHc,eAAN,CAFrB;;AAAA;AAESb,iBAFT;;AASG,kBAAIA,IAAIC,MAAJ,IAAc,GAAlB,EAAuB;AACrBa,wBAAQd,IAAImB,IAAZ;AACD,eAFD,MAEK;AACHJ,uBAAO,qCAAP;AACD;AAbJ;AAAA;;AAAA;AAAA;AAAA;;AAeGA;;AAfH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAkBD,GApBM,CAAP;AAqBD,CAtBM;;AAwBA,IAAMK,gCAAY,SAAZA,SAAY,UAAW;AAClC,MAAMC,qCACDC,OADC,CAAN;AAGA,SAAO,uBAAIC,IAAJ,CAASF,OAAT,EAAkBG,QAAQC,GAAR,CAAYC,eAA9B,EAA+C;AACpD;AACAC,YAAQH,QAAQC,GAAR,CAAYG;AAFgC,GAA/C,CAAP;AAID,CARM;;AAUA,IAAMC,gCAAY,SAAZA,SAAY,YAAa;AACpC,SAAO,uBAAY,UAACf,OAAD,EAAUC,MAAV,EAAqB;AACtC,2BAAIe,MAAJ,CAAWC,SAAX,EAAsBP,QAAQC,GAAR,CAAYC,eAAlC,EAAmD;AACjDC,cAAQH,QAAQC,GAAR,CAAYG;AAD6B,KAAnD,EAEG,UAAC1B,GAAD,EAAM8B,OAAN,EAAkB;AACnB,UAAI9B,GAAJ,EAAS;AACPa,eAAOb,GAAP;AACD;AACDY,cAAQkB,OAAR;AACD,KAPD;AAQD,GATM,CAAP;AAUD,CAXM","file":"util.js","sourcesContent":["import axios from \"axios\";\r\nconst pino = require(\"pino\")();\r\nimport jwt from \"jsonwebtoken\";\r\nimport Promise from \"bluebird\";\r\n\r\n/**\tCreates a callback that proxies node callback style arguments to an Express Response object.\r\n *\t@param {express.Response} res\tExpress HTTP Response\r\n *\t@param {number} [status=200]\tStatus code to send on success\r\n *\r\n *\t@example\r\n *\t\tlist(req, res) {\r\n *\t\t\tcollection.find({}, toRes(res));\r\n *\t\t}\r\n */\r\nexport function toRes(res, status = 200) {\r\n  return (err, thing) => {\r\n    if (err) \r\n      return res.status(500).send(err);\r\n    \r\n    if (thing && typeof thing.toObject === \"function\") {\r\n      thing = thing.toObject();\r\n    }\r\n    res\r\n      .status(status)\r\n      .json(thing);\r\n  };\r\n}\r\n\r\n/* Social Token Validator */\r\nconst providers = {\r\n  facebook: {\r\n    url: \"https://graph.facebook.com/me\"\r\n  },\r\n  google: {\r\n    url: \"https://www.googleapis.com/oauth2/v3/tokeninfo\"\r\n  }\r\n};\r\nexport const validateWithProvider = (network, socialToken) => {\r\n  return new Promise((resolve, reject) => {\r\n    // Send a GET request to provider with the token as query string\r\n    (async() => {\r\n      try {\r\n        const res = await axios({\r\n          method: \"get\",\r\n          url: providers[network].url,\r\n          params: {\r\n            access_token: socialToken\r\n          }\r\n        });\r\n        if (res.status == 200) {\r\n          resolve(res.data);\r\n        }else{\r\n          reject('Fail to authenticate with provider.')\r\n        }\r\n      } catch (err) {\r\n        reject(err);\r\n      }\r\n    })();\r\n  });\r\n};\r\n\r\nexport const createJwt = profile => {\r\n  const payload = {\r\n    ...profile\r\n  };\r\n  return jwt.sign(payload, process.env.JWT_PRIVATE_KEY, {\r\n    // expiresIn: '2h',\r\n    issuer: process.env.JWT_ISSUER\r\n  });\r\n};\r\n\r\nexport const verifyJwt = jwtString => {\r\n  return new Promise((resolve, reject) => {\r\n    jwt.verify(jwtString, process.env.JWT_PRIVATE_KEY, {\r\n      issuer: process.env.JWT_ISSUER\r\n    }, (err, decoded) => {\r\n      if (err) {\r\n        reject(err);\r\n      }\r\n      resolve(decoded);\r\n    });\r\n  });\r\n};\r\n"]}