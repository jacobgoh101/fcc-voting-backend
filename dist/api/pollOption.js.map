{"version":3,"sources":["../../src/api/pollOption.js"],"names":["authMiddleware","require","pollExistMiddleware","Promise","mongodb","promisifyAll","pino","BaseJoi","Extension","Joi","extend","pollOptionSchema","config","db","api","pollOptionCollection","collection","get","req","res","id","params","findOneAsync","_id","ObjectID","option","rest","success","message","forbidden","post","data","body","created_by","userId","validateAsync","insertOneAsync"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AACA,IAAMA,iBAAiBC,QAAQ,8BAAR,CAAvB;AACA,IAAMC,sBAAsBD,QAAQ,mCAAR,CAA5B;AACA,IAAME,UAAUF,QAAQ,UAAR,CAAhB;AACA,IAAMG,UAAUD,QAAQE,YAAR,CAAqBJ,QAAQ,SAAR,CAArB,CAAhB;AACA,IAAMK,OAAOL,QAAQ,MAAR,GAAb;AACA,IAAMM,UAAUN,QAAQ,KAAR,CAAhB;AACA,IAAMO,YAAYP,QAAQ,qBAAR,CAAlB;AACA,IAAMQ,MAAMN,QAAQE,YAAR,CAAqBE,QAAQG,MAAR,CAAeF,SAAf,CAArB,CAAZ;AACA,IAAMG,mBAAmBV,QAAQ,sBAAR,CAAzB;;kBAEc,gBAAkB;AAAA,MAAhBW,MAAgB,QAAhBA,MAAgB;AAAA,MAARC,EAAQ,QAARA,EAAQ;;AAC9B,MAAIC,MAAM,sBAAV;AACA,MAAMC,uBAAuBF,GAAGG,UAAH,CAAc,YAAd,CAA7B;;AAEAF,MAAIG,GAAJ,CAAQ,MAAR,EAAgB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC5B,QAAMC,KAAKF,IAAIG,MAAJ,CAAWD,EAAtB;AACA,+DAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEsBL,qBAAqBO,YAArB,CAAkC;AACnDC,qBAAK,IAAInB,QAAQoB,QAAZ,CAAqBJ,EAArB;AAD8C,eAAlC,CAFtB;;AAAA;AAEOK,oBAFP;;AAKGN,kBACGO,IADH,CAEGC,OAFH,CAEWF,MAFX;AALH;AAAA;;AAAA;AAAA;AAAA;;AASG,kBAAG,YAAIG,OAAP,EAAgB,cAAM,YAAIA,OAAV;AAChBT,kBACGO,IADH,CAEGG,SAFH;;AAVH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAeD,GAjBD;;AAmBAf,MAAIgB,IAAJ,CAAS,GAAT,EAAc,CACZ9B,cADY,EACIE,mBADJ,CAAd,EAEG,UAACgB,GAAD,EAAMC,GAAN,EAAc;AACf,QAAMY,OAAOb,IAAIc,IAAjB;AACA,QAAI,CAACD,KAAKE,UAAV,EACEF,KAAKE,UAAL,GAAkBf,IAAIgB,MAAtB;;AAEF,+DAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAESzB,IAAI0B,aAAJ,CAAkBJ,IAAlB,EAAwBpB,gBAAxB,CAFT;;AAAA;AAAA;AAAA,qBAGSI,qBAAqBqB,cAArB,CAAoCL,IAApC,CAHT;;AAAA;AAIGZ,kBACGO,IADH,CAEGC,OAFH,CAEWI,IAFX;AAJH;AAAA;;AAAA;AAAA;AAAA;;AAQG,kBAAG,aAAIH,OAAP,EAAgB,eAAM,aAAIA,OAAV;AAChBT,kBACGO,IADH,CAEGG,SAFH;;AATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAcD,GArBD;;AAuBA,SAAOf,GAAP;AACD,C","file":"pollOption.js","sourcesContent":["import {Router} from \"express\";\r\nconst authMiddleware = require('../middleware/authMiddleware');\r\nconst pollExistMiddleware = require('../middleware/pollExistMiddleware');\r\nconst Promise = require(\"bluebird\");\r\nconst mongodb = Promise.promisifyAll(require('mongodb'));\r\nconst pino = require(\"pino\")();\r\nconst BaseJoi = require('joi');\r\nconst Extension = require('joi-date-extensions');\r\nconst Joi = Promise.promisifyAll(BaseJoi.extend(Extension));\r\nconst pollOptionSchema = require('../models/pollOption');\r\n\r\nexport default({config, db}) => {\r\n  let api = Router();\r\n  const pollOptionCollection = db.collection(\"pollOption\");\r\n\r\n  api.get(\"/:id\", (req, res) => {\r\n    const id = req.params.id;\r\n    (async() => {\r\n      try {\r\n        let option = await pollOptionCollection.findOneAsync({\r\n          _id: new mongodb.ObjectID(id)\r\n        });\r\n        res\r\n          .rest\r\n          .success(option);\r\n      } catch (err) {\r\n        if(err.message) err = err.message;\r\n        res\r\n          .rest\r\n          .forbidden(err);\r\n      }\r\n    })();\r\n  });\r\n\r\n  api.post(\"/\", [\r\n    authMiddleware, pollExistMiddleware\r\n  ], (req, res) => {\r\n    const data = req.body;\r\n    if (!data.created_by) \r\n      data.created_by = req.userId;\r\n    \r\n    (async() => {\r\n      try {\r\n        await Joi.validateAsync(data, pollOptionSchema)\r\n        await pollOptionCollection.insertOneAsync(data)\r\n        res\r\n          .rest\r\n          .success(data);\r\n      } catch (err) {\r\n        if(err.message) err = err.message;\r\n        res\r\n          .rest\r\n          .forbidden(err);\r\n      }\r\n    })();\r\n  });\r\n\r\n  return api;\r\n};"]}