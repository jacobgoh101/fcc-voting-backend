{"version":3,"sources":["../../src/api/auth.js"],"names":["pino","require","Promise","BaseJoi","Extension","Joi","promisifyAll","extend","schema","object","keys","email","string","required","config","db","api","post","req","res","network","body","socialToken","userCollection","collection","data","profile","find","toArrayAsync","users","length","validateAsync","insertOneAsync","rest","success","message","token","forbidden"],"mappings":";;;;;;;;;;;;;;AAAA;;AACA;;;;AACA,IAAMA,OAAOC,QAAQ,MAAR,GAAb;AACA,IAAMC,UAAUD,QAAQ,UAAR,CAAhB;AACA,IAAME,UAAUF,QAAQ,KAAR,CAAhB;AACA,IAAMG,YAAYH,QAAQ,qBAAR,CAAlB;AACA,IAAMI,MAAMH,QAAQI,YAAR,CAAqBH,QAAQI,MAAR,CAAeH,SAAf,CAArB,CAAZ;;AAEA,IAAMI,SAASH,IACZI,MADY,GAEZC,IAFY,CAEP;AACJC,SAAON,IACJO,MADI,GAEJD,KAFI,GAGJE,QAHI;AADH,CAFO,CAAf;;kBASc,gBAAkB;AAAA,MAAhBC,MAAgB,QAAhBA,MAAgB;AAAA,MAARC,EAAQ,QAARA,EAAQ;;AAC9B,MAAIC,MAAM,sBAAV;;AAEAA,MAAIC,IAAJ,CAAS,GAAT,EAAc,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC1B;AACA,QAAMC,UAAUF,IAAIG,IAAJ,CAASD,OAAzB;AACA,QAAME,cAAcJ,IAAIG,IAAJ,CAASC,WAA7B;;AAEA,QAAMC,iBAAiBR,GAAGS,UAAH,CAAc,MAAd,CAAvB;;AAEA,QAAIb,QAAQ,EAAZ;AACA,QAAIc,OAAO,EAAX;;AAEA,+DAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAGuB,gCAAqBL,OAArB,EAA8BE,WAA9B,CAHvB;;AAAA;AAGOI,qBAHP;;AAIGf,sBAAQe,QAAQf,KAAhB;AACAc,mBAAKd,KAAL,GAAaA,KAAb;AALH;AAAA,qBAMqBY,eACfI,IADe,CACV,EAAChB,OAAOA,KAAR,EADU,EAEfiB,YAFe,EANrB;;AAAA;AAMOC,mBANP;;AAAA,oBASOA,MAAMC,MAAN,KAAiB,CATxB;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAUWzB,IAAI0B,aAAJ,CAAkBN,IAAlB,EAAwBjB,MAAxB,CAVX;;AAAA;AAAA;AAAA,qBAWWe,eAAeS,cAAf,CAA8BP,IAA9B,CAXX;;AAAA;AAAA;AAAA;;AAAA;AAaKA,qBAAOI,MAAM,CAAN,CAAP;;AAbL;AAeGV,kBACGc,IADH,CAEGC,OAFH,CAEW;AACPC,yBAAS,uBAAuBxB,KADzB;AAEPyB,uBAAO,qBAAUX,IAAV,CAFA;AAGPA;AAHO,eAFX;AAfH;AAAA;;AAAA;AAAA;AAAA;;AAuBG,kBAAG,YAAIU,OAAP,EAAgB,cAAM,YAAIA,OAAV;AAChBhB,kBACGc,IADH,CAEGI,SAFH;;AAxBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AA6BD,GAvCD;;AAyCA,SAAOrB,GAAP;AACD,C","file":"auth.js","sourcesContent":["import {Router} from \"express\";\r\nimport {validateWithProvider, createJwt, verifyJwt} from \"../lib/util\";\r\nconst pino = require(\"pino\")();\r\nconst Promise = require(\"bluebird\");\r\nconst BaseJoi = require('joi');\r\nconst Extension = require('joi-date-extensions');\r\nconst Joi = Promise.promisifyAll(BaseJoi.extend(Extension));\r\n\r\nconst schema = Joi\r\n  .object()\r\n  .keys({\r\n    email: Joi\r\n      .string()\r\n      .email()\r\n      .required()\r\n  });\r\n\r\nexport default({config, db}) => {\r\n  let api = Router();\r\n\r\n  api.post(\"/\", (req, res) => {\r\n    // Grab the social network and token\r\n    const network = req.body.network;\r\n    const socialToken = req.body.socialToken;\r\n\r\n    const userCollection = db.collection(\"user\");\r\n\r\n    let email = \"\";\r\n    let data = {};\r\n\r\n    (async() => {\r\n      try {\r\n        // Validate the social token \r\n        let profile = await validateWithProvider(network, socialToken);\r\n        email = profile.email;\r\n        data.email = email;\r\n        let users = await userCollection\r\n          .find({email: email})\r\n          .toArrayAsync();\r\n        if (users.length === 0) {\r\n          await Joi.validateAsync(data, schema);\r\n          await userCollection.insertOneAsync(data);\r\n        } else {\r\n          data = users[0];\r\n        }\r\n        res\r\n          .rest\r\n          .success({\r\n            message: \"Authenticated as: \" + email,\r\n            token: createJwt(data),\r\n            data\r\n          });\r\n      } catch (err) {\r\n        if(err.message) err = err.message;\r\n        res\r\n          .rest\r\n          .forbidden(err);\r\n      }\r\n    })();\r\n  });\r\n\r\n  return api;\r\n};\r\n"]}