{"version":3,"sources":["../../src/api/vote.js"],"names":["authMiddleware","require","pollExistMiddleware","pollOptionExistMiddleware","Promise","mongodb","promisifyAll","pino","BaseJoi","Extension","Joi","extend","voteSchema","config","db","api","voteCollection","collection","get","req","res","id","params","findOneAsync","_id","ObjectID","vote","rest","success","message","forbidden","post","data","body","created_date","Date","created_by","userId","poll_id","validateAsync","insertOneAsync","put","updateOneAsync"],"mappings":"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","file":"vote.js","sourcesContent":["import {Router} from \"express\";\r\nconst authMiddleware = require('../middleware/authMiddleware');\r\nconst pollExistMiddleware = require('../middleware/pollExistMiddleware');\r\nconst pollOptionExistMiddleware = require('../middleware/pollOptionExistMiddleware');\r\nconst Promise = require(\"bluebird\");\r\nconst mongodb = Promise.promisifyAll(require('mongodb'));\r\nconst pino = require(\"pino\")();\r\nconst BaseJoi = require('joi');\r\nconst Extension = require('joi-date-extensions');\r\nconst Joi = Promise.promisifyAll(BaseJoi.extend(Extension));\r\nconst voteSchema = require('../models/vote');\r\n\r\nexport default({config, db}) => {\r\n  let api = Router();\r\n  const voteCollection = db.collection(\"vote\");\r\n\r\n  api.get(\"/:id\", (req, res) => {\r\n    const id = req.params.id;\r\n    (async() => {\r\n      try {\r\n        let vote = await voteCollection.findOneAsync({\r\n          _id: new mongodb.ObjectID(id)\r\n        });\r\n        res\r\n          .rest\r\n          .success(vote);\r\n      } catch (err) {\r\n        if(err.message) err = err.message;\r\n        res\r\n          .rest\r\n          .forbidden(err);\r\n      }\r\n    })();\r\n  });\r\n\r\n  api.post(\"/\", [\r\n    authMiddleware, pollExistMiddleware, pollOptionExistMiddleware\r\n  ], (req, res) => {\r\n    const data = req.body;\r\n    if (!data.created_date) \r\n      data.created_date = new Date();\r\n    if (!data.created_by) \r\n      data.created_by = req.userId;\r\n    \r\n    (async() => {\r\n      try {\r\n        // check if this user already vote for this poll\r\n        let vote = await voteCollection.findOneAsync({created_by: data.created_by, poll_id: data.poll_id});\r\n        if (vote) \r\n          throw \"This user has already vote for this poll\";\r\n        \r\n        await Joi.validateAsync(data, voteSchema);\r\n        await voteCollection.insertOneAsync(data);\r\n        res\r\n          .rest\r\n          .success(data);\r\n      } catch (err) {\r\n        if(err.message) err = err.message;\r\n        res\r\n          .rest\r\n          .forbidden(err);\r\n      }\r\n    })();\r\n  });\r\n\r\n  api.put(\"/\", [\r\n    authMiddleware, pollExistMiddleware, pollOptionExistMiddleware\r\n  ], (req, res) => {\r\n    const data = req.body;\r\n    if (!data.created_by) \r\n      data.created_by = req.userId;\r\n    \r\n    (async() => {\r\n      try {\r\n        // check if this user already vote for this poll\r\n        let vote = await voteCollection.findOneAsync({created_by: data.created_by, poll_id: data.poll_id});\r\n        if (!vote) {\r\n          throw \"This user hasn't vote for this poll yet\";\r\n        }\r\n        data.created_date = vote.created_date;\r\n        await Joi.validateAsync(data, voteSchema);\r\n        await voteCollection.updateOneAsync({\r\n          created_by: data.created_by,\r\n          poll_id: data.poll_id\r\n        }, data);\r\n        res\r\n          .rest\r\n          .success(data);\r\n      } catch (err) {\r\n        if(err.message) err = err.message;\r\n        res\r\n          .rest\r\n          .forbidden(err);\r\n      }\r\n    })();\r\n  });\r\n\r\n  return api;\r\n};"]}