{"version":3,"sources":["../../src/api/poll.js"],"names":["authMiddleware","require","Promise","mongodb","promisifyAll","pino","BaseJoi","Extension","Joi","extend","pollSchema","config","db","api","pollCollection","collection","pollOptionCollection","userCollection","voteCollection","get","req","res","find","toArrayAsync","result","promiseArr","map","poll","index","findOneAsync","_id","ObjectID","created_by","user","email","created_by_email","all","rest","success","message","forbidden","id","params","poll_id","String","options","votes","userId","polls","post","data","body","created_date","Date","validateAsync","insertOneAsync","delete","deleteOneAsync","deleteManyAsync"],"mappings":"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","file":"poll.js","sourcesContent":["import {Router} from \"express\";\r\nconst authMiddleware = require('../middleware/authMiddleware');\r\nconst Promise = require(\"bluebird\");\r\nconst mongodb = Promise.promisifyAll(require('mongodb'));\r\nconst pino = require(\"pino\")();\r\nconst BaseJoi = require('joi');\r\nconst Extension = require('joi-date-extensions');\r\nconst Joi = Promise.promisifyAll(BaseJoi.extend(Extension));\r\nconst pollSchema = require('../models/poll');\r\n\r\nexport default({config, db}) => {\r\n  let api = Router();\r\n  const pollCollection = db.collection(\"poll\");\r\n  const pollOptionCollection = db.collection(\"pollOption\");\r\n  const userCollection = db.collection(\"user\");\r\n  const voteCollection = db.collection(\"vote\");\r\n\r\n  api.get(\"/\", (req, res) => {\r\n    (async() => {\r\n      try {\r\n        let result = await pollCollection\r\n          .find({})\r\n          .toArrayAsync();\r\n\r\n        let promiseArr = result.map(async(poll, index) => {\r\n          let user = await userCollection.findOneAsync({\r\n            _id: new mongodb.ObjectID(poll.created_by)\r\n          });\r\n          if (user.email) \r\n            result[index].created_by_email = user.email;\r\n          else \r\n            result[index].created_by_email = \"\";\r\n          return result[index];\r\n        });\r\n\r\n        result = await Promise.all(promiseArr);\r\n        res\r\n          .rest\r\n          .success(result);\r\n      } catch (err) {\r\n        if (err.message) \r\n          err = err.message;\r\n        res\r\n          .rest\r\n          .forbidden(err);\r\n      }\r\n    })();\r\n  });\r\n\r\n  api.get(\"/:id\", (req, res) => {\r\n    const id = req.params.id;\r\n    (async() => {\r\n      try {\r\n        let poll = await pollCollection.findOneAsync({\r\n          _id: new mongodb.ObjectID(id)\r\n        });\r\n        let user = await userCollection.findOneAsync({\r\n          _id: new mongodb.ObjectID(poll.created_by)\r\n        });\r\n        poll.created_by_email = user.email;\r\n        let options = await pollOptionCollection\r\n          .find({\r\n          poll_id: String(poll._id)\r\n        })\r\n          .toArrayAsync();\r\n        poll['options'] = options;\r\n        let votes = await voteCollection\r\n          .find({\r\n          poll_id: String(poll._id)\r\n        })\r\n          .toArrayAsync();\r\n        poll['votes'] = votes;\r\n        res\r\n          .rest\r\n          .success(poll);\r\n      } catch (err) {\r\n        if (err.message) \r\n          err = err.message;\r\n        res\r\n          .rest\r\n          .forbidden(err);\r\n      }\r\n    })();\r\n  });\r\n\r\n  api.get(\"/user/:userId\", (req, res) => {\r\n    const userId = req.params.userId;\r\n    (async() => {\r\n      try {\r\n        let polls = await pollCollection\r\n          .find({created_by: userId})\r\n          .toArrayAsync();\r\n        res\r\n          .rest\r\n          .success(polls);\r\n      } catch (err) {\r\n        if (err.message) \r\n          err = err.message;\r\n        res\r\n          .rest\r\n          .forbidden(err);\r\n      }\r\n    })();\r\n  });\r\n\r\n  api.post(\"/\", authMiddleware, (req, res) => {\r\n    const data = req.body;\r\n    if (!data.created_date) \r\n      data.created_date = new Date();\r\n    if (!data.created_by) \r\n      data.created_by = req.userId;\r\n    \r\n    (async() => {\r\n      try {\r\n        await Joi.validateAsync(data, pollSchema);\r\n        await pollCollection.insertOneAsync(data);\r\n        res\r\n          .rest\r\n          .success(data);\r\n      } catch (err) {\r\n        if (err.message) \r\n          err = err.message;\r\n        res\r\n          .rest\r\n          .forbidden(err);\r\n      }\r\n    })();\r\n  });\r\n\r\n  api.delete(\"/:poll_id\", authMiddleware, (req, res) => {\r\n    const poll_id = req.params.poll_id;\r\n    const userId = req.userId;\r\n\r\n    (async() => {\r\n      try {\r\n        // check if this user is owner\r\n        let poll = await pollCollection.findOneAsync({\r\n          _id: new mongodb.ObjectID(poll_id),\r\n          created_by: userId\r\n        });\r\n        if (!poll) {\r\n          res\r\n            .rest\r\n            .forbidden('This is not the creator of this poll.');\r\n          return;\r\n        }\r\n\r\n        await pollCollection.deleteOneAsync({\r\n          _id: new mongodb.ObjectID(poll_id)\r\n        });\r\n        await pollOptionCollection.deleteManyAsync({poll_id: poll_id});\r\n        await voteCollection.deleteManyAsync({poll_id: poll_id});\r\n        res\r\n          .rest\r\n          .success(`Poll ${poll_id} deleted`);\r\n      } catch (err) {\r\n        if (err.message) \r\n          err = err.message;\r\n        res\r\n          .rest\r\n          .forbidden(err);\r\n      }\r\n    })();\r\n  });\r\n\r\n  return api;\r\n};"]}